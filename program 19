#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#define NUM_THREADS 5
pthread_mutex_t lock;
int shared_resource = 0;
void *thread_function(void *thread_id) {
    long tid = (long)thread_id;
    pthread_mutex_lock(&lock);
    shared_resource++;
    printf("Thread %ld: shared resource value = %d\n", tid, shared_resource);
    pthread_mutex_unlock(&lock);
    pthread_exit(NULL);
}
int main(int argc, char *argv[]) {
    pthread_t threads[NUM_THREADS];
    int rc;
    long t;
    pthread_mutex_init(&lock, NULL);
    for (t = 0; t < NUM_THREADS; t++) {
        rc = pthread_create(&threads[t], NULL, thread_function, (void *)t);
        if (rc) {
            printf("Error: pthread_create() returned %d\n", rc);
            exit(-1);
        }
    }
    for (t = 0; t < NUM_THREADS; t++) {
        pthread_join(threads[t], NULL);
    }
    pthread_mutex_destroy(&lock);
    pthread_exit(NULL);
    return 0;
}
